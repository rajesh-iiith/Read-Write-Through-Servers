File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	
	}
File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	
	}
File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	File f=new File(args[0]);
        if(f.isFile())
        { 
            FileInputStream fileInputStream=new FileInputStream(f);
            int chunkSize = 1024*64;
            //Create chunks and write into stream
            byte [] chunk=new byte[chunkSize];
            int read;
            int i=0;
            while(((read=fileInputStream.read(chunk,0,chunkSize))!=-1))
            {
               
            	if (read== chunkSize)
                myInterface.FileWrite64K(f.getName(), i, chunk);
            	else
            	{
            		byte [] lastChunk  = new byte[read];
            		for (int j=0; j< lastChunk.length ; j++){
            			lastChunk[j] = chunk[j];
            		}
            		myInterface.FileWrite64K(f.getName(), i, lastChunk);
            	}
            	
            	
            	i++;
            }
            
            fileInputStream.close();
           
           File fo=new File("output/"+f.getName());
           FileOutputStream fileOutputStream=new FileOutputStream(fo);
           byte [] incomingBytes = new byte[chunkSize];
           long numberOfChunks = myInterface.NumFileChunks(f.getName());
           for (long j = 0; j< numberOfChunks; j++) {
        	   incomingBytes = myInterface.FileRead64K(f.getName(), j);
        	   fileOutputStream.write(incomingBytes);
        	   fileOutputStream.flush();
		}
            
          fileOutputStream.close();  
            
        }  
		
	}
	